1、绝对路径和相对路径
绝对路径：通过给定的这个路径直接能在计算机中找到对应文件的路径
相对路径：文件相对与应用程序的路径
结论：
我们在开发中应该尽量使用相对路径

2、装箱、拆箱
装箱：就是将值类型转换为引用类型
拆箱：将引用类型转换为值类型
辨别两种类型是否发生了装箱或者拆箱，要看，张两种类型是否存在继承关系

3、将创建文件流对象的过程卸载using当中，会自动地帮助我们释放流所占用的资源

4、实现多态的手段
1）虚方法
步骤
1、将父类的方法标记为虚方法，使用关键字virtual，这个函数可以被子类重新写一遍

2)抽象类
当父类中的方法不知道如何去实现的时候，可以考虑将父类写成抽象类，将方法写成抽象方法

5、抽两类特点
1、抽象成员必须标记为abstract,并且不能有任何实现
2、抽象成员必须在抽象类中
3、抽象类不能被实例化
4、子类继承抽象类后，必须必须把父类的所有抽象成员都重写
（除非子类也是一个抽象类，则可以不重写）
5、抽象成员的访问修饰符不能是private
6、在抽象类中可以包含实例成员，并且抽象类的实例成员不可以被子类实现
7、抽象类是有构造函数的，虽然不能被实例化
8、如果父类的抽象方法中有参数，那么，继承这个抽象父类的子类在重写父类的方法的时候必须传入对应参数，
如果抽象父类的抽象方法中有返回值，那么子类在重写这个抽象方法的时候，也必须要传入这个返回值。
====
如果父类中的方法有默认的实现，并且父类需要被实例化，这是可以将父类定义成一个普通类，用虚方法来实现多态。
如果父类中的方法没有默认实现，父类也不需要被实例化，则可以将该类定义为抽象类。
